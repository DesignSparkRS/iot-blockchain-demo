#!/usr/bin/python3
# -*- coding: utf-8 -*-
# Copyright (c) 2018 RS Components Ltd
# SPDX-License-Identifier: Apache License 2.0

import sys
import time
import json
import yaml
import zmq
import signal
import smbus

import paho.mqtt.publish as publish

from web3 import Web3, HTTPProvider
from web3.contract import ConciseContract
from web3.middleware import geth_poa_middleware

from luma.led_matrix.device import max7219
from luma.core.interface.serial import spi, noop
from luma.core.legacy import text, show_message
from luma.core.legacy.font import proportional, CP437_FONT

with open("/opt/iotbc/etc/config.yml", 'r') as ymlfile:
    cfg = yaml.load(ymlfile)

with open("/opt/iotbc/etc/CarCrashABI.json", 'r') as f:
    abi = json.load(f)

device = cfg['application']['role']
max_accel = cfg['application']['impact_trigger']
leds_port = cfg['application']['leds_port']
broker = cfg['mqtt']['broker']
account = cfg['blockchain']['account']
contract = cfg['blockchain']['contract']

# Accelerometer
#
# From: https://github.com/MikroElektronika/Raspberry_Pi_3_demos/blob/master/demo/accel_click.py

i2c = smbus.SMBus(1)
device_address = 0x1d

DATA_FORMAT = 0x31
BW_RATE     = 0x2C
FIFO_CTL    = 0x38
POWER_CTL   = 0x2D
ACCEL_ERROR = 0x02

def write_data( address_reg, data ):
    global device_address
    i2c.write_byte_data(device_address, address_reg, data)

def init_accel():
   global device_address
   global DATA_FORMAT
   global BW_RATE
   global FIFO_CTL
   global ACCEL_ERROR

   id = 0x00
   write_data( ACCEL_ERROR, 0x00 )
   id = i2c.read_byte_data(device_address, 0x00)
   print(id)
   if ( id != 0xE5 ):
       return ACCEL_ERROR
   else:
       write_data( DATA_FORMAT, 0x08 )
       write_data( BW_RATE, 0x0A )
       write_data( FIFO_CTL, 0x80 )
       write_data( POWER_CTL, 0x08 )
       return 0x00

def accel_read( H_reg, L_reg ):
   global device_address
   H_out = i2c.read_byte_data(device_address,H_reg)
   L_out = i2c.read_byte_data(device_address,L_reg)
   H_out = ( H_out << 8 )
   H_out = ( H_out | L_out )
   return H_out

def accel_average():
   sy = 0
   for i in range(0,15):
       sy = sy + accel_read( 0x35, 0x34 ) # Y (high_reg, low_reg)
   reading = sy >> 4
   return reading


# Ethereum

w3 = Web3(HTTPProvider('http://127.0.0.1:8545'))
w3.middleware_stack.inject(geth_poa_middleware, layer=0)

CarCrash = w3.eth.contract(
    contract, abi=abi, ContractFactoryClass=ConciseContract)

def IoTBCwrite(data):
    CarCrash.setImpact(int(data), transact={'from': account})


# Gracefully exit

class GracefulKiller:
    kill_now = False
    def __init__(self):
        signal.signal(signal.SIGINT, self.exit_gracefully)
        signal.signal(signal.SIGTERM, self.exit_gracefully)

    def exit_gracefully(self,signum, frame):
        self.kill_now = True


# Main

if __name__ == '__main__':

    if ( init_accel() == 0 ):
        print('Initialised accelerometer')

    else:
        print('Failed to initialise accelerometer')

    context = zmq.Context()
    leds = context.socket(zmq.PAIR)
    leds.connect("tcp://localhost:%s" % leds_port)

    serial = spi(port=0, device=0, gpio=noop())
    display = max7219(serial, cascaded=1, block_orientation=0, rotate=2)

    killer = GracefulKiller()

    while True:
        y_accel = accel_average()

        if y_accel > max_accel:
            print('Impact! Y-axis acceleration: {0}'.format(y_accel))

            try:
                show_message(display, 'Crash!', fill="white", font=proportional(CP437_FONT), scroll_delay=0.02)
            except:
                print('Failed to update LED matrix display')

            try:
                publish.single('iotbc/{0}'.format(device), y_accel, hostname=broker, client_id=device)
            except:
                print('Failed to publish to MQTT broker')

            try:
                IoTBCwrite(y_accel)
                leds.send_string('red,0.05,20')
            except:
                print('Failed to write to blockchain')

            time.sleep(5)

        else:
            time.sleep(0.2)

        if killer.kill_now:
            break
