#!/usr/bin/python3
# -*- coding: utf-8 -*-
# Copyright (c) 2018 RS Components Ltd
# SPDX-License-Identifier: Apache License 2.0

import sys
import time
import json
import yaml
import zmq
import signal

from datetime import datetime

import paho.mqtt.publish as publish

from web3 import Web3, HTTPProvider
from web3.contract import ConciseContract
from web3.middleware import geth_poa_middleware

import RPi.GPIO as GPIO

from dotstar import Adafruit_DotStar

with open("/opt/iotbc/etc/config.yml", 'r') as ymlfile:
    cfg = yaml.load(ymlfile)

with open("/opt/iotbc/etc/LeakKillerABI.json", 'r') as f:
    abi = json.load(f)

device = cfg['application']['role']
leds_port = cfg['application']['leds_port']
broker = cfg['mqtt']['broker']
account = cfg['blockchain']['account']
contract = cfg['blockchain']['contract']

numpixels = 36
driplen = 5
drips = 3

# Simulate leak

def leaksim():
    head = numpixels
    tail = numpixels - driplen

    for i in range(drips * (numpixels + 1)):
        strip.setPixelColor(head, 0)
        strip.setPixelColor(tail, 0xFFFFFF)
        strip.show()
        time.sleep(0.04)

        head -= 1
        tail -= 1

        if head == -1:
            head = numpixels
            tail = numpixels - driplen

        i += 1


# Indicate leak

def leakind():
    for i in range(5):
        GPIO.output(12, GPIO.HIGH)
        time.sleep(0.5)
        GPIO.output(12, GPIO.LOW)
        time.sleep(0.5)


# Ethereum

w3 = Web3(HTTPProvider('http://127.0.0.1:8545'))
w3.middleware_stack.inject(geth_poa_middleware, layer=0)

LeakKiller = w3.eth.contract(
    contract, abi=abi, ContractFactoryClass=ConciseContract)

def IoTBCwrite(data):
    LeakKiller.setLastLeak(int(data), transact={'from': account})


# Gracefully exit

class GracefulKiller:
    kill_now = False
    def __init__(self):
        signal.signal(signal.SIGINT, self.exit_gracefully)
        signal.signal(signal.SIGTERM, self.exit_gracefully)

    def exit_gracefully(self,signum, frame):
        self.kill_now = True

# Main

if __name__ == '__main__':

    GPIO.setmode(GPIO.BCM)
    GPIO.setup(4, GPIO.IN, pull_up_down=GPIO.PUD_UP)
    GPIO.setup(12, GPIO.OUT)

    strip = Adafruit_DotStar(numpixels)
    strip.begin()
    strip.setBrightness(64)

    context = zmq.Context()
    leds = context.socket(zmq.PAIR)
    leds.connect("tcp://localhost:%s" % leds_port)

    killer = GracefulKiller()

    while True:
        leaksw = GPIO.input(4)

        if leaksw == 0:
            leaktime = int(datetime.today().timestamp())

            print('Leak detected at {0}!'.format(leaktime))

            leaksim()

            leakind()

            try:
                publish.single('iotbc/{0}'.format(device), leaktime, hostname=broker, client_id=device)
            except:
                print('Failed to publish to MQTT broker')

            try:
                IoTBCwrite(leaktime)
                leds.send_string('red,0.05,20')
            except:
                print('Failed to write to blockchain')

            time.sleep(5)

        else:
            time.sleep(0.2)

        if killer.kill_now:
            break
